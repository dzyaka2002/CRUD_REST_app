name: CI
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  BACKEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/backend-app
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/frontend-app
  TAG: ${{ github.sha }}
  K8S_NAMESPACE: default
  DEPLOYMENT_NAME_B: backend
  DEPLOYMENT_NAME_F: frontend

#------------------------------------------
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      # Backend steps
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      - name: Format backend code with black
        working-directory: backend
        run: |
          pip install black
          black .
          
      # Frontend steps
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          
      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: |
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
          
      - name: Build frontend project
        working-directory: frontend
        run: npm run build
#------------------------------------------          
  test:
    name: Test
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9]
    steps:
      # Общие шаги
      - name: Checkout code
        uses: actions/checkout@v4
      
      # Backend тесты
      - name: Set up Python for backend tests
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Install backend dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Set PYTHONPATH for backend
        working-directory: backend
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)" >> $GITHUB_ENV 
          
      - name: Run backend tests with pytest
        working-directory: backend
        run: pytest --maxfail=1 --disable-warnings --tb=short
          
      # Frontend тесты
      - name: Setup Node.js for frontend tests
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: |
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: frontend
        run: npm test -- --watchAll=false --ci
    
#------------------------------------------ 
  sonarqube:
    name: SonarQube Scan
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:

        # Backend-тесты
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'  # Явно указана версия Python
          
      - name: Install dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov  # Добавлен pytest-cov

      - name: Set PYTHONPATH
        working-directory: backend
        run: echo "PYTHONPATH=$(pwd)" >> $GITHUB_ENV  # Упрощено
          
      - name: Run tests with coverage
        working-directory: backend
        run: |
          pytest --cov=app --cov-report=xml:coverage.xml --cov-report=term-missing tests/

      - name: Verify coverage file
        working-directory: backend
        run: |
          ls -la
          cat coverage.xml | head -n 5

        # Frontend-тесты
      - name: Setup Node.js for frontend
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Cache frontend dependencies
        uses: actions/cache@v3
        with:
          path: |
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
  
      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci
  
      - name: Run frontend tests with coverage
        working-directory: frontend
        run: |
          npm test -- --watchAll=false --ci --coverage
          # Конвертируем coverage в формат lcov для SonarQube
  
      - name: Verify frontend coverage file
        working-directory: frontend
        run: |
          ls -la coverage/
          cat coverage/lcov.info | head -n 5

      # SonarQube анализ
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.organization=dzyaka2002
            -Dsonar.qualitygate.wait=true
            -Dsonar.projectKey=dzyaka2002_CRUD_REST_app
            -Dsonar.projectName=CRUD_REST_app
            -Dsonar.sources=backend/app,frontend/src
            -Dsonar.tests=backend/tests,frontend/src/components/product
            -Dsonar.exclusions=**/node_modules/**,**/.github/**,**/tests/**,**/venv/**
            -Dsonar.python.coverage.reportPaths=backend/coverage.xml
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.sourceEncoding=UTF-8
     
      # Этап проверки Quality Gate
      - name: SonarQube Quality Gate Check
        uses: SonarSource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io
        with:
          pollingTimeoutSec: 600  # 10 минут ожидания
          retryIntervalSec: 5     # Интервал проверки


#------------------------------------------
  docker:
    name:  Build and Push Docker Images
    needs: [sonarqube]
    if: success()
    runs-on: ubuntu-latest
    steps:
      # Общие шаги
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}
      
      # Backend деплой
      - name: Build and push Backend Docker image
        working-directory: backend
        run: |
          docker build -t ${{ env.BACKEND_IMAGE }}:latest -t ${{ env.BACKEND_IMAGE }}:${{ env.TAG }} .
          docker push ${{ env.BACKEND_IMAGE }}:latest
          docker push ${{ env.BACKEND_IMAGE }}:${{ env.TAG }}
      
      # Frontend деплой
      - name: Build and push Frontend Docker image
        working-directory: frontend
        run: |
          docker build \
            --build-arg BUILD_TIME=${{ env.BUILD_TIME }} \
            -t ${{ env.FRONTEND_IMAGE }}:latest \
            -t ${{ env.FRONTEND_IMAGE }}:${{ env.TAG }} .
          docker push ${{ env.FRONTEND_IMAGE }}:latest
          docker push ${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}

#------------------------------------------
  update-k8s:
    name: Update Kubernetes Deployments
    needs: [docker]
    runs-on: ubuntu-latest
    steps:
      - name: Setup YC CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          ~/yandex-cloud/bin/yc config set token ${{ secrets.YC_OAUTH_TOKEN }}
          ~/yandex-cloud/bin/yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          ~/yandex-cloud/bin/yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
          ~/yandex-cloud/bin/yc iam key create --service-account-name k8s --output key.json
        
      - name: Get kubeconfig
        run: ~/yandex-cloud/bin/yc managed-kubernetes cluster get-credentials --id ${{ secrets.YC_K8S_CLUSTER_ID }} --external
    
      - name: Update Backend Deployment
        run: |
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME_B }} \
            $(kubectl get deploy ${{ env.DEPLOYMENT_NAME_B }} -o jsonpath='{.spec.template.spec.containers[0].name}')=${{ env.BACKEND_IMAGE }}:${{ env.TAG }} \
            -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME_B }} -n ${{ env.K8S_NAMESPACE }}
    
      - name: Update Frontend Deployment
        run: |
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME_F }} \
            $(kubectl get deploy ${{ env.DEPLOYMENT_NAME_F }} -o jsonpath='{.spec.template.spec.containers[0].name}')=${{ env.FRONTEND_IMAGE }}:${{ env.TAG }} \
            -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME_F }} -n ${{ env.K8S_NAMESPACE }}
