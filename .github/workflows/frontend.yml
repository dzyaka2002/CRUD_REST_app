name: frontend

on:
  push:
    branches: [master]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [master]
env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  FRONTEND_IMAGE: ${{ secrets.DOCKERHUB_USERNAME }}/frontend-app
  TAG: ${{ github.sha }}
  K8S_NAMESPACE: default
  DEPLOYMENT_NAME: frontend


jobs:
  build-frontend:
    name: Build frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

  test-frontend:
    name: Test frontend
    needs: build-frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --watchAll=false --ci
  deploy-frontend:
    name: Deploy Frontend to DockerHub
    needs: [build-frontend, test-frontend]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push Frontend Docker image
        run: |
          docker build \
            --build-arg BUILD_TIME=${{ env.BUILD_TIME }} \
            -t ${{ env.FRONTEND_IMAGE }}:latest \
            -t ${{ env.FRONTEND_IMAGE }}:${{ env.TAG }} .
          docker push ${{ env.FRONTEND_IMAGE }}:latest
          docker push ${{ env.FRONTEND_IMAGE }}:${{ env.TAG }}
#------------------------------------------  
  update-k8s:
    needs: deploy-frontend
    name: Load new image
    runs-on: ubuntu-latest
    steps:
      - name: Setup YC CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          ~/yandex-cloud/bin/yc config set token ${{ secrets.YC_OAUTH_TOKEN }}
          ~/yandex-cloud/bin/yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          ~/yandex-cloud/bin/yc config set folder-id ${{ secrets.YC_FOLDER_ID }}
          ~/yandex-cloud/bin/yc iam key create --service-account-name k8s --output key.json
          
      - name: Get kubeconfig
        run: ~/yandex-cloud/bin/yc managed-kubernetes cluster get-credentials --id ${{ secrets.YC_K8S_CLUSTER_ID }} --external
      
      - name: Update Kubernetes Deployment
        run: |
          kubectl set image deployment/${{ env.DEPLOYMENT_NAME }} $(kubectl get deploy ${{ env.DEPLOYMENT_NAME }} -o jsonpath='{.spec.template.spec.containers[0].name}')=${{ env.FRONTEND_IMAGE }}:${{ env.TAG }} -n ${{ env.K8S_NAMESPACE }}
          kubectl rollout status deployment/${{ env.DEPLOYMENT_NAME }} -n ${{ env.K8S_NAMESPACE }}
